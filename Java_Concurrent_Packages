java concurnecy courtsey Doug Lea:

A)Java concurrency advantages (Performance,relaibility,maintainable):
1)exploiting multiple cores
2)illusion of parallelism on single core machines by acuiring and releasing cpu at runtime
3)supports multithreading
4)provides thread safe synchronisation
5)Reduced time to develop for even a complex thread program

B) Following are the JAVA packages that support concurrent programming
o Java.util.concurrent
o Java.util.concurrent.atomic
o Java.util.concurrent.locks
o Java.lang.Threads

Executor Framework:
-> provides 'abstraction' for task execution
-> supports 'launching' new tasks
-> based on the “producer-consumer” pattern( Producers: ones that submit the tasks, consumers: threads that run those tasks)
-> implementations: ThreadPoolExecutor and schedulesThreadPoolExecutor
-> Subinterface : ExecutorService and Runnable interface
-> Callable and Runnable
-> Callable return a value as well as throws exception to parent thread.
-> runnable return void and doesnt throw any excpetion to parent thread.
-> AbstractExecutorService: Provides default implementations of  the ExecutorService execution method
-> ScheduledExecutorService: Supports both the Callable and Runnable objects with delays


points to ponder:
->lock striping in ConcurrentHashMaps
->Fairness in ReentrantLock
-> actions that can trigger release of a lock
-> specifying atomic keyword or using atomic classes, the code ensures that the thread executing the 
statement cannot be interrupted.
-> additional parameter “runnable()” in CyclicBarrier specifying action to be done upong crossing the barrier.
->reset CountDownLatch before using it again!
-> CyclicBarrier vs CountDownLatch
->semaphores, mutexes and barriers are used to implement synchronisation
-> semaphores are binary flags, can be set to 0 (acquire()) and 1 (release()) (Seamaphore class)
-> Mutex are locks in java (ReadWriteLocks class)).
-> Barriers insures that all the threads wait for each other to reach to a common barrier point (CyclicBarrier class) by 
invoking await() which cause the program to move forward!
-> CyclicBarrier vs CountDownLatch = countdownlatch keeps the track of the number of the threads running simultaenously and
counts down their number upon thread finish. while cyclic barrier wait for all other threads at a barrier point.

